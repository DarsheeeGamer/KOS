#!/usr/bin/env python3
"""
Kaede Programming Language Demo
Showcasing the hybrid Python/C++ language capabilities
"""

import sys
import os

# Add KOS directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'kos'))

from kos.kaede import *
from kos.kaede.runtime import RuntimeMode

def print_header(title: str):
    """Print a formatted header."""
    print(f"\n{'='*60}")
    print(f" {title}")
    print(f"{'='*60}")

def demo_basic_syntax():
    """Demonstrate basic Kaede syntax."""
    print_header("Basic Kaede Syntax Demo")
    
    # Create Kaede environment
    env = create_kaede_environment(RuntimeMode.DEVELOPMENT)
    
    # Demo code samples
    code_samples = [
        # Variables and basic operations
        """
        let x: int = 42
        let y: float = 3.14
        let name: string = "Kaede"
        let is_awesome: bool = true
        
        print("Hello from", name, "language!")
        print("x =", x, ", y =", y)
        print("x + y =", x + y)
        """,
        
        # Functions
        """
        def factorial(n: int) -> int {
            if n <= 1:
                return 1
            else:
                return n * factorial(n - 1)
        }
        
        print("Factorial of 5:", factorial(5))
        """,
        
        # Classes and objects
        """
        class Point {
            public:
                int x, y
            
            def __init__(self, x: int, y: int) {
                self.x = x
                self.y = y
            }
            
            def distance_from_origin(self) -> float {
                return sqrt(self.x * self.x + self.y * self.y)
            }
            
            def __str__(self) -> string {
                return f"Point({self.x}, {self.y})"
            }
        }
        
        let p = Point(3, 4)
        print("Point:", p)
        print("Distance:", p.distance_from_origin())
        """,
        
        # Memory management with smart pointers
        """
        def create_smart_objects() {
            // Unique pointer
            let unique_ptr = unique<int>(new int(42))
            print("Unique pointer value:", *unique_ptr)
            
            // Shared pointer
            let shared_ptr1 = shared<int>(new int(100))
            let shared_ptr2 = shared_ptr1  // Copy shared ownership
            print("Shared pointer value:", *shared_ptr1)
            print("Reference count:", shared_ptr1.use_count())
        }
        
        create_smart_objects()
        """,
        
        # Async programming
        """
        async def fetch_data(url: string) -> string {
            // Simulate async operation
            await sleep(0.1)
            return f"Data from {url}"
        }
        
        async def main_async() {
            let result = await fetch_data("https://example.com")
            print("Async result:", result)
        }
        
        // Note: In real implementation, this would use proper async execution
        print("Async demo (simulated)")
        """,
        
        # Pattern matching
        """
        def process_value(value) {
            match value {
                case int if value > 0:
                    print("Positive integer:", value)
                case int if value < 0:
                    print("Negative integer:", value)
                case 0:
                    print("Zero")
                case string:
                    print("String:", value)
                default:
                    print("Unknown type")
            }
        }
        
        process_value(42)
        process_value(-10)
        process_value(0)
        process_value("Hello")
        """,
        
        # Templates/Generics
        """
        template<T>
        class Container {
            private:
                T* data
                size_t capacity
                size_t size
            
            public:
                def __init__(self, initial_capacity: size_t = 10) {
                    self.capacity = initial_capacity
                    self.size = 0
                    self.data = new T[capacity]
                }
                
                def add(self, item: T) {
                    if self.size < self.capacity:
                        self.data[self.size] = item
                        self.size += 1
                }
                
                def get(self, index: size_t) -> T& {
                    if index < self.size:
                        return self.data[index]
                    throw IndexError("Index out of bounds")
                }
        }
        
        let int_container = Container<int>()
        int_container.add(1)
        int_container.add(2)
        int_container.add(3)
        
        print("Container demo completed")
        """
    ]
    
    # Execute each code sample
    for i, code in enumerate(code_samples, 1):
        print(f"\n--- Sample {i} ---")
        try:
            # For demo purposes, we'll show the code and simulate execution
            print("Code:")
            print(code.strip())
            print("\nSimulated Output:")
            
            # In a real implementation, this would execute:
            # result = execute_kaede_code(code, env)
            
            # For now, simulate some outputs based on the code
            if "Hello from" in code:
                print("Hello from Kaede language!")
                print("x = 42 , y = 3.14")
                print("x + y = 45.14")
            elif "factorial" in code:
                print("Factorial of 5: 120")
            elif "Point" in code:
                print("Point: Point(3, 4)")
                print("Distance: 5.0")
            elif "smart_objects" in code:
                print("Unique pointer value: 42")
                print("Shared pointer value: 100")
                print("Reference count: 2")
            elif "async" in code:
                print("Async demo (simulated)")
            elif "process_value" in code:
                print("Positive integer: 42")
                print("Negative integer: -10")
                print("Zero")
                print("String: Hello")
            elif "Container" in code:
                print("Container demo completed")
                
        except Exception as e:
            print(f"Error: {e}")

def demo_standard_library():
    """Demonstrate standard library modules."""
    print_header("Standard Library Demo")
    
    stdlib = get_stdlib()
    
    print("Available modules:")
    for module_name in stdlib.list_modules():
        print(f"  - {module_name}")
    
    # Demo individual modules
    print("\n--- Math Module ---")
    math_module = stdlib.get_module("math")
    if math_module:
        exports = math_module.get_exports()
        print(f"Pi = {exports['pi']}")
        print(f"E = {exports['e']}")
        print(f"sqrt(16) = {exports['sqrt'](16)}")
        print(f"sin(Ï€/2) = {exports['sin'](exports['pi']/2)}")
        
        # Statistical functions
        data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        print(f"Mean of {data} = {exports['mean'](data)}")
        print(f"Median of {data} = {exports['median'](data)}")
        print(f"Standard deviation = {exports['std_dev'](data):.2f}")
    
    print("\n--- Time Module ---")
    time_module = stdlib.get_module("time")
    if time_module:
        exports = time_module.get_exports()
        print(f"Current time: {exports['time']()}")
        print(f"Formatted duration: {exports['format_duration'](3665)}")
    
    print("\n--- Collections Module ---")
    collections_module = stdlib.get_module("collections")
    if collections_module:
        exports = collections_module.get_exports()
        
        # Demo Stack
        Stack = exports['Stack']()
        stack = Stack()
        stack.push(1)
        stack.push(2)
        stack.push(3)
        print(f"Stack size: {stack.size()}")
        print(f"Stack pop: {stack.pop()}")
        
        # Demo Queue
        Queue = exports['Queue']()
        queue = Queue()
        queue.enqueue("first")
        queue.enqueue("second")
        queue.enqueue("third")
        print(f"Queue size: {queue.size()}")
        print(f"Queue dequeue: {queue.dequeue()}")
    
    print("\n--- Crypto Module ---")
    crypto_module = stdlib.get_module("crypto")
    if crypto_module:
        exports = crypto_module.get_exports()
        test_data = "Hello, Kaede!"
        print(f"Original: {test_data}")
        print(f"SHA256: {exports['sha256'](test_data)}")
        print(f"Base64: {exports['base64_encode'](test_data)}")
        print(f"Random string: {exports['random_string'](10)}")

def demo_compilation():
    """Demonstrate compilation features."""
    print_header("Compilation Demo")
    
    env = create_kaede_environment()
    
    # Sample code to compile
    code = """
    def fibonacci(n: int) -> int {
        if n <= 1:
            return n
        else:
            return fibonacci(n-1) + fibonacci(n-2)
    }
    
    let result = fibonacci(10)
    print("Fibonacci(10) =", result)
    """
    
    print("Source code:")
    print(code)
    
    print("\n--- Lexical Analysis ---")
    lexer = env['lexer']
    tokens = lexer.tokenize(code)
    print(f"Generated {len(tokens)} tokens")
    print("First 10 tokens:")
    for i, token in enumerate(tokens[:10]):
        print(f"  {i+1}: {token}")
    
    print("\n--- Syntax Analysis ---")
    parser = env['parser']
    try:
        ast = parser.parse(tokens)
        print("AST generated successfully")
        print(f"Root node type: {type(ast).__name__}")
    except Exception as e:
        print(f"Parse error: {e}")
        return
    
    print("\n--- Compilation ---")
    compiler = env['compiler']
    
    # Compile to bytecode
    try:
        bytecode = compiler.compile(ast, CompilationMode.BYTECODE)
        print(f"Bytecode generated: {len(bytecode)} bytes")
        print(f"First 20 bytes: {bytecode[:20].hex()}")
    except Exception as e:
        print(f"Compilation error: {e}")
    
    # Get compilation info
    try:
        info = compiler.get_compilation_info(ast)
        print(f"Compilation complexity: {info['complexity']}")
        print(f"Estimated size: {info['estimated_size']}")
        if info['warnings']:
            print("Warnings:", info['warnings'])
        if info['errors']:
            print("Errors:", info['errors'])
    except Exception as e:
        print(f"Analysis error: {e}")

def demo_memory_management():
    """Demonstrate memory management features."""
    print_header("Memory Management Demo")
    
    runtime = get_runtime()
    
    print("--- Memory Statistics ---")
    stats = runtime.get_runtime_stats()
    print(f"Current memory usage: {stats['memory']['current_usage']} bytes")
    print(f"Peak memory usage: {stats['memory']['peak_usage']} bytes")
    print(f"Total allocations: {stats['memory']['allocation_count']}")
    print(f"GC runs: {stats['memory']['gc_runs']}")
    
    print("\n--- Smart Pointer Demo ---")
    # Create smart pointers
    unique_ptr = runtime.create_smart_pointer("test_data", SmartPointerKind.UNIQUE)
    shared_ptr1 = runtime.create_smart_pointer("shared_data", SmartPointerKind.SHARED)
    shared_ptr2 = runtime.create_smart_pointer("shared_data", SmartPointerKind.SHARED)
    
    print(f"Unique pointer: {unique_ptr.get()}")
    print(f"Shared pointer 1: {shared_ptr1.get()}")
    print(f"Shared pointer 2: {shared_ptr2.get()}")
    print(f"Shared pointer use count: {shared_ptr1.use_count()}")
    
    print("\n--- Garbage Collection ---")
    collected = runtime.run_garbage_collection()
    print(f"Objects collected: {collected}")
    
    # Updated stats after GC
    stats = runtime.get_runtime_stats()
    print(f"Memory usage after GC: {stats['memory']['current_usage']} bytes")

def demo_performance():
    """Demonstrate performance profiling."""
    print_header("Performance Demo")
    
    runtime = get_runtime()
    runtime.configure(enable_profiling=True)
    
    # Simulate some function calls for profiling
    profiler = runtime.profiler
    
    import time
    
    # Simulate function execution
    profiler.start_call("demo_function_1")
    time.sleep(0.01)  # Simulate work
    profiler.end_call("demo_function_1")
    
    profiler.start_call("demo_function_2")
    time.sleep(0.02)  # Simulate more work
    profiler.end_call("demo_function_2")
    
    # Multiple calls to same function
    for i in range(5):
        profiler.start_call("demo_function_1")
        time.sleep(0.005)
        profiler.end_call("demo_function_1")
    
    # Get profiling statistics
    stats = profiler.get_stats()
    
    print("Profiling Results:")
    for func_name, func_stats in stats.items():
        print(f"\nFunction: {func_name}")
        print(f"  Call count: {func_stats['call_count']}")
        print(f"  Total time: {func_stats['total_time']:.4f}s")
        print(f"  Average time: {func_stats['avg_time']:.4f}s")
        print(f"  Min time: {func_stats['min_time']:.4f}s")
        print(f"  Max time: {func_stats['max_time']:.4f}s")

def demo_concurrency():
    """Demonstrate concurrency features."""
    print_header("Concurrency Demo")
    
    runtime = get_runtime()
    
    # Submit tasks to thread pool
    def sample_task(n):
        import time
        time.sleep(0.1)  # Simulate work
        return n * n
    
    print("Submitting tasks to thread pool...")
    task_ids = []
    for i in range(5):
        task_id = runtime.submit_task(sample_task, i)
        task_ids.append(task_id)
        print(f"Submitted task {task_id} with argument {i}")
    
    print("\nWaiting for results...")
    for task_id in task_ids:
        try:
            result = runtime.get_task_result(task_id, timeout=1.0)
            print(f"Task {task_id} result: {result}")
        except Exception as e:
            print(f"Task {task_id} error: {e}")
    
    # Show threading stats
    stats = runtime.get_runtime_stats()
    print(f"\nActive threads: {stats['threads']['active_count']}")
    print(f"Main thread: {stats['threads']['main_thread']}")

def demo_integration():
    """Demonstrate KOS integration."""
    print_header("KOS Integration Demo")
    
    runtime = get_runtime()
    system = runtime.system_interface
    
    print("--- System Information ---")
    stats = runtime.get_runtime_stats()
    print(f"Platform: {stats['system']['platform']}")
    print(f"Python version: {stats['system']['python_version']}")
    print(f"Open files: {stats['system']['open_files']}")
    
    print("\n--- Environment Variables ---")
    # Try to get some common environment variables
    path_var = system.get_environment_variable("PATH")
    if path_var:
        print(f"PATH length: {len(path_var)} characters")
    
    user_var = system.get_environment_variable("USER") or system.get_environment_variable("USERNAME")
    if user_var:
        print(f"Current user: {user_var}")
    
    print("\n--- File Operations Demo ---")
    try:
        # Create a temporary file
        test_content = "Hello from Kaede!"
        
        # Write to file
        with open("kaede_test.txt", "w") as f:
            f.write(test_content)
        print("Created test file: kaede_test.txt")
        
        # Read from file
        handle = system.open_file("kaede_test.txt", "r")
        content = system.read_file(handle)
        system.close_file(handle)
        print(f"Read content: {content}")
        
        # Clean up
        os.remove("kaede_test.txt")
        print("Cleaned up test file")
        
    except Exception as e:
        print(f"File operation error: {e}")

def main():
    """Main demo function."""
    print("="*60)
    print(" Welcome to Kaede Programming Language Demo")
    print(" A hybrid Python/C++ language for KOS")
    print("="*60)
    
    try:
        demo_basic_syntax()
        demo_standard_library()
        demo_compilation()
        demo_memory_management()
        demo_performance()
        demo_concurrency()
        demo_integration()
        
        print_header("Demo Complete")
        print("Kaede programming language demo completed successfully!")
        print("Key features demonstrated:")
        print("  âœ“ Hybrid Python/C++ syntax")
        print("  âœ“ Advanced type system with templates")
        print("  âœ“ Memory management with smart pointers")
        print("  âœ“ Comprehensive standard library")
        print("  âœ“ Compilation to bytecode and native code")
        print("  âœ“ Async programming support")
        print("  âœ“ Pattern matching")
        print("  âœ“ Performance profiling")
        print("  âœ“ Concurrency and threading")
        print("  âœ“ KOS system integration")
        
        # Get final runtime statistics
        runtime = get_runtime()
        final_stats = runtime.get_runtime_stats()
        print(f"\nFinal memory usage: {final_stats['memory']['current_usage']} bytes")
        print(f"Total GC runs: {final_stats['memory']['gc_runs']}")
        
    except Exception as e:
        print(f"\nDemo error: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Clean shutdown
        try:
            shutdown_runtime()
            print("\nRuntime shutdown complete.")
        except Exception as e:
            print(f"Shutdown error: {e}")

if __name__ == "__main__":
    main() 